// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/eugenshima/myapp/internal/model"

	uuid "github.com/google/uuid"
)

// PersonService is an autogenerated mock type for the PersonService type
type PersonService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, entity
func (_m *PersonService) Create(ctx context.Context, entity *model.Person) (uuid.UUID, error) {
	ret := _m.Called(ctx, entity)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, *model.Person) uuid.UUID); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Person) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, uuidString
func (_m *PersonService) Delete(ctx context.Context, uuidString uuid.UUID) (uuid.UUID, error) {
	ret := _m.Called(ctx, uuidString)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) uuid.UUID); ok {
		r0 = rf(ctx, uuidString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, uuidString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *PersonService) GetAll(ctx context.Context) ([]*model.Person, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Person
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Person); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *PersonService) GetByID(ctx context.Context, id uuid.UUID) (*model.Person, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Person
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Person); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, uuidString, entity
func (_m *PersonService) Update(ctx context.Context, uuidString uuid.UUID, entity *model.Person) (uuid.UUID, error) {
	ret := _m.Called(ctx, uuidString, entity)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.Person) uuid.UUID); ok {
		r0 = rf(ctx, uuidString, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *model.Person) error); ok {
		r1 = rf(ctx, uuidString, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPersonService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPersonService creates a new instance of PersonService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPersonService(t mockConstructorTestingTNewPersonService) *PersonService {
	mock := &PersonService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
